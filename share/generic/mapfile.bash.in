#!/bin/bash
# Copyright (c) 2011, Brian Case
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

wms_srs='EPSG:900913 EPSG:4326 EPSG:3857';
myprojection='
    PROJECTION
     "init=epsg:4326"
     "proj=longlat"
     "ellps=WGS84"
     "datum=WGS84"
     "no_defs"
     ""
    END

';

mapfile_oformat_jpeg_old='
  OUTPUTFORMAT
    NAME jpeg
    DRIVER "GD/JPEG"
    MIMETYPE "image/jpeg"
    IMAGEMODE RGB
    FORMATOPTION  QUALITY=90
    EXTENSION "jpg"
  END
';

mapfile_oformat_jpeg_new='
OUTPUTFORMAT
  NAME "jpeg"
  DRIVER AGG/JPEG
  MIMETYPE "image/jpeg"
  IMAGEMODE RGB
  EXTENSION "jpg"
  FORMATOPTION "GAMMA=0.75"
END
';

mapfile_oformat_gtiff='
  OUTPUTFORMAT
    NAME GTiff
    DRIVER "GDAL/GTiff"
    MIMETYPE "image/tiff"
    IMAGEMODE RGBA
    FORMATOPTION  TILED=YES
    EXTENSION "tif"
    TRANSPARENT ON
  END
';

mapfile_oformat_png='
  OUTPUTFORMAT
    NAME PNG24
    DRIVER "GDAL/PNG"
    MIMETYPE "image/png"
    EXTENSION PNG
    IMAGEMODE RGBA
    TRANSPARENT ON
  END
';


NewWorld_group="NewWorld"

###############################################################################
## @brief function to write out a map file with overview
##
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param scale     scale to switch between hires and overview layers
## @param latest    "latest" or "previous" if we are making lateste or previous
##                     map
##
## @return 0 for success
##
## @details
## global vars
## @param vector          flag to mark the data as vector not raster
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param vectorstyle     mapserver STYLE tags for vector data
## @param offsite         mapserver OFFSITE tags
## 
###############################################################################

writemap_withover () {
    local ts="$1"
    local extent="$2"
    local scale="$3"
    local latest="$4"
    
    if [[ "$latest" == "latest" ]]
    then
        local lname="${dsname}_latest"
        local mapfile="${outdir}/${dsname}latest.map"

    elif [[ "$latest" == "previous" ]]
    then
        local lname="${dsname}_previous"
        local mapfile="${outdir}/${dsname}previous.map"
        
    else
        local lname="${dsname}_${ts}"
        local mapfile="${outdir}/${dsname}${ts}.map"

    fi
    
    
    
    ##### do we have image data? #####
    
    if ! istrue "$vector"
    then
    
        ##### if dokey #####
        
        if [ -n "$mskey" ]
        then
            #FIXME are keyimages reletive to included mapfile or root?
            class='
    CLASS
        NAME ""
        KEYIMAGE "'"done/${dsname}/${dsname}.key.png"'"
    END
    '
    
        fi

        cat > "${mapfile}" << EOF
        
  LAYER
    NAME '${lname}_hires'
    TYPE RASTER
    STATUS ON
    DUMP TRUE

    ${myprojection}

    METADATA
      'wms_title'           '${lname}_hires'
      'wms_srs'             '${wms_srs}'
      'wms_extent'	        '$extent'
      "ows_enable_request"  "*"
    END

    TILEINDEX '${outdir}/${dsname}${ts}.shp'
    GROUP '${lname}'
    MAXSCALEDENOM $scale
    $offsite
    PROCESSING "OVERSAMPLE_RATIO=10"
    PROCESSING "RESAMPLE=AVERAGE"
    $class
  END
EOF

    ##### do we have vector data? #####

    else 
        cat > "${mapfile}" << EOF
        
  LAYER
    NAME '${lname}_hires'
    STATUS ON
    TYPE POLYGON
    
    ${myprojection}

    METADATA
      'wms_title'           '${lname}_hires'
      'wms_srs'             '${wms_srs}'
      'wms_extent'          '$extent'
      "ows_enable_request"  "*"
    END
    
    TILEINDEX '${outdir}/${dsname}${ts}.shp'
    GROUP '${lname}'
    MAXSCALEDENOM $scale
    
${vectorstyle}

  END  # layer

EOF

    fi

    cat >> "${mapfile}" << EOF

  LAYER
    NAME '${lname}_ovr'
    TYPE RASTER
    STATUS ON
    DUMP TRUE

    ${myprojection}

    METADATA
      'wms_title'           '${lname}_ovr'
      'wms_srs'             '${wms_srs}'
      'wms_extent'	        '$extent'
      "ows_enable_request"  "*"
    END

    TILEINDEX "${outdir}/overview_${dsname}${ts}.shp"
    GROUP '${lname}'
    MINSCALEDENOM $scale
    $offsite
    PROCESSING "OVERSAMPLE_RATIO=10"
    PROCESSING "RESAMPLE=AVERAGE"
  END

EOF

    
}

###############################################################################
## @brief function to write out a map file without a overview layer for vector
##         data with a fixed style
##
## @param lname     layer name
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param mapfile   full path to the mapfile
##
## @return 0 for success
##
## @details
## global vars
## @param vector          flag to mark the data as vector not raster
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param vectorstyle     mapserver STYLE tags for vector data
##
#################################################################################

writemap_vector_fixedstyle () {
    local lname="$1"
    local ts="$2"
    local extent="$3"
    local mapfile="$4"
                
    
cat > "${mapfile}" << EOF
        
  LAYER
    NAME '${lname}'
    STATUS ON
    TYPE POLYGON

    ${myprojection}
    
    METADATA
      'wms_title'           '${lname}'
      'wms_srs'             '${wms_srs}'
      'wms_extent'          '$extent'
      "ows_enable_request"  "*"
    END
    
    TILEINDEX '${outdir}/${dsname}${ts}.shp'
    
${vectorstyle}

  END  # layer

EOF
    
}

###############################################################################
## @brief function to write out a map file without a overview layer for vector
##         data with a gradient style
##
## @param lname     layer name
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param mapfile   full path to the mapfile
##
## @return 0 for success
##
## @details
## global vars
## @param vector          flag to mark the data as vector not raster
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param vector_gradient
## @param vector_gradient_field
##
###############################################################################

writemap_vector_gradient () {
    local lname="$1"
    local ts="$2"
    local extent="$3"
    local mapfile="$4"
                
    cat > "${mapfile}" << EOF
        
  LAYER
    NAME '${lname}'
    STATUS ON
    TYPE POLYGON

    ${myprojection}
    
    METADATA
      'wms_title'           '${lname}'
      'wms_srs'             '${wms_srs}'
      'wms_extent'          '$extent'
      "ows_enable_request"  "*"
    END
    
    TILEINDEX '${outdir}/${dsname}${ts}.shp'
    
    CLASSITEM '${vector_gradient_field}'

EOF

    local v r g b label
    while read v r g b label
    do
        cat >> "${mapfile}" << EOF
    CLASS
      NAME '$label'
      #TEMPLATE 
      EXPRESSION ([${vector_gradient_field}] <= ${v} )
      STYLE
        COLOR $r $g $b
        WIDTH 2
      END
      #SYMBOL 'circle'
    END

EOF

    done <<< "$vector_gradient"


    cat >> "${mapfile}" << EOF
  END  # layer

EOF


}

###############################################################################
## @brief function to write out a map file without a overview layer for vector
##         data with a fixed scale style
##
## @param lname     layer name
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param mapfile   full path to the mapfile
##
## @return 0 for success
##
## @details
## global vars
## @param vector          flag to mark the data as vector not raster
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param vector_scale
## @param vector_scale_field
##
###############################################################################

writemap_vector_fixed_scale () {
    local lname="$1"
    local ts="$2"
    local extent="$3"
    local mapfile="$4"
                
    cat > "${mapfile}" << EOF
        
  LAYER
    NAME '${lname}'
    STATUS ON
    TYPE POLYGON

    ${myprojection}
    
    METADATA
      'wms_title'           '${lname}'
      'wms_srs'             '${wms_srs}'
      'wms_extent'          '$extent'
      "ows_enable_request"  "*"
    END
    
    TILEINDEX '${outdir}/${dsname}${ts}.shp'
    
    CLASSITEM '${vector_scale_field}'

EOF

    IFS=,
    local v r g b label
    while read v r g b label
    do
        cat >> "${mapfile}" << EOF
    CLASS
      NAME '$label'
      #TEMPLATE 
      EXPRESSION "${v}"
      STYLE
        COLOR $r $g $b
        WIDTH 2
      END
      #SYMBOL 'circle'
    END

EOF
    
    done <<< "$vector_fixed_scale"
    unset IFS

    cat >> "${mapfile}" << EOF
  END  # layer

EOF


}


###############################################################################
## @brief function to write out a map file without a overview layer for raster
##         data
##
## @param lname     layer name
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param mapfile   full path to the mapfile
##
## @return 0 for success
##
## @details
## global vars
## @param vector          flag to mark the data as vector not raster
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param mkkey           if set the it uses a fixed legend image
## @param offsite         mapserver OFFSITE tags
##
###############################################################################

writemap_raster () {
    local lname="$1"
    local ts="$2"
    local extent="$3"
    local mapfile="$4"
    
    ##### if dokey #####
    
    if [ -n "$mskey" ]
    then
        #FIXME are keyimages reletive to included mapfile or root?
        class='
    CLASS
        NAME ""
        KEYIMAGE "'"done/${dsname}/${dsname}.key.png"'"
    END
    '
    
    fi
    
    cat > "${mapfile}" << EOF
        
  LAYER
    NAME '${lname}'
    TYPE RASTER
    STATUS ON
    DUMP TRUE

    ${myprojection}

    METADATA
      'wms_title'           '${lname}'
      'wms_srs'             '${wms_srs}'
      'wms_extent'	        '$extent'
      "ows_enable_request"  "*"
    END
    
    TILEINDEX '${outdir}/${dsname}${ts}.shp'
    $offsite
    PROCESSING "OVERSAMPLE_RATIO=10"
    PROCESSING "RESAMPLE=AVERAGE"
    $class
  END

EOF

}
###############################################################################
## @brief function to write out a map file without a overview layer
##
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param scale     scale to switch between hires and overview layers
## @param latest    "latest" or "previous" if we are making lateste or previous
##                     map
##
## @return 0 for success
##
## @details
## global vars
## @param vector          flag to mark the data as vector not raster
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param vectorstyle     mapserver STYLE tags for vector data
## @param offsite         mapserver OFFSITE tags
## @param vector_gradient
## @param vector_gradient_field
## @param writemap_vector_fixed_scale 
###############################################################################

writemap_noover () {
    local ts="$1"
    local extent="$2"
    local latest="$3"
                
    if [[ "$latest" == "latest" ]]
    then
        local lname="${dsname}_latest"
        local mapfile="${outdir}/${dsname}latest.map"

    elif [[ "$latest" == "previous" ]]
    then
        local lname="${dsname}_previous"
        local mapfile="${outdir}/${dsname}previous.map"
        
    else
        local lname="${dsname}_${ts}"
        local mapfile="${outdir}/${dsname}${ts}.map"

    fi
        
    ##### do we have image data? #####
    
    if ! istrue "$vector"
    then
        
        writemap_raster "${lname}" "$ts" "$extent" "$mapfile"
    
    ##### vector with fixed style #####
    
    elif [ -n "${vectorstyle}" ]
    then
    
        writemap_vector_fixedstyle "${lname}" "$ts" "$extent" "$mapfile"
    
    ##### vector with gradient #####
    
    elif [ -n "${vector_gradient}" ]
    then
    
        writemap_vector_gradient "${lname}" "$ts" "$extent" "$mapfile"
    
    ##### vector with fixed style #####
    
    elif [ -n "${vector_fixed_scale}" ]
    then
    
        writemap_vector_fixed_scale  "${lname}" "$ts" "$extent" "$mapfile"
    
    fi
     
}

###############################################################################
## @brief function to write out a map file for newworld
##
## @param ts        timestamp of the layer
## @param extent    extent of the layer
##
## @return 0 for success
##
## @details
## global vars
## @param dsname          name of the dataset
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param outdir          dataset output dir 
## @param NewWorld_group  name of the mapserver newworld group
##
###############################################################################

writemap_NewWorld () {
    local ts="$1"
    local extent="$2"


    local scale=$(getoverviewscale "$ts")
    
    local mapfile="${outdir}/NewWorld_${dsname}${ts}.map"
    
    local myscale
    if fcmp "$NewWorld_MAXSCALEDENOM > $scale"
    then
        myscale="$scale"
    else
        myscale="$NewWorld_MAXSCALEDENOM"
    fi

    cat > "$mapfile" << EOF

  LAYER
    NAME '${dsname}_${ts}'
    TYPE RASTER
    STATUS ON
    DUMP TRUE
    
    ${myprojection}
    
    METADATA
      'wms_title'           '${dsname}_${ts}'
      'wms_srs'             '${wms_srs}'
      'wms_extent'	        '$extent'
      "ows_enable_request"   "*"
    END
    
    TILEINDEX '${outdir}/${dsname}${ts}.shp'

    GROUP '$NewWorld_group'
    MAXSCALEDENOM $myscale

    PROCESSING "OVERSAMPLE_RATIO=10"
    PROCESSING "RESAMPLE=AVERAGE"

  END

EOF

    ##### add overviews if we need them #####

    if fcmp "$NewWorld_MAXSCALEDENOM > $scale"
    then
        cat >> "${mapfile}" << EOF

  LAYER
    NAME '${dsname}_${ts}_ovr'
    TYPE RASTER
    STATUS ON
    DUMP TRUE

    ${myprojection}

    METADATA
      'wms_title'           '${dsname}_${ts}_ovr'
      'wms_srs'             '${wms_srs}'
      'wms_extent'	        '$extent'
      "ows_enable_request"  "*"
    END

    TILEINDEX "${outdir}/overview_${dsname}${ts}.shp"
    GROUP '$NewWorld_group'
    MINSCALEDENOM $scale
    MAXSCALEDENOM $NewWorld_MAXSCALEDENOM

    PROCESSING "OVERSAMPLE_RATIO=10"
    PROCESSING "RESAMPLE=AVERAGE"
  END

EOF
    fi

}

##############################################################################
## @brief main writemap function
##
## @param ts        timestamp of the layer
## @param extent    extent of the layer
## @param latest    timestalp of the latest layer
## @param prev      timestalp of the previous layer
## @param reover    flag to mark the job as a -reover
##
## @return 0 for success
##
## @details
## global vars
## @param doovr yes/no create external overviews
##
##############################################################################


writemap () {
    local ts="$1"
    local extent="$2"
    local latest="$3"
    local prev="$4"
    local reover="$5"
    #FIXME scale var is missing
    
    if istrue "$doovr" 0
    then

        if istrue "$reover" 1
        then

            ##### write a temp map file #####

            writemap_noover "$ts" "$extent" ""

            ##### create a single file for larger area overviews #####

            local scale=$(makeoverview "$ts" "$extent")
        else
            
            ##### get the overview scale from the old mapfile #####

            local scale=$(getoverviewscale "$ts")
        fi
        
        ##### write the map file with the correct scale #####

        writemap_withover "$ts" "$extent" "$scale"
       
        ##### build latest and prev mapfiles
       
        if [[ "$latest" == "$ts" ]]
        then
            writemap_withover "$ts" "$extent" "$scale" "latest"
        elif  [[ "$prev" == "$ts" ]]
        then
            writemap_withover "$ts" "$extent" "$scale" "previous"
        fi
                        
    else

        ##### write the map file with no min max layers #####

        writemap_noover "$ts" "$extent"

        ##### build latest and prev mapfiles

        if [[ "$latest" == "$ts" ]] && istrue "$dolatest"
        then
            writemap_noover "$ts" "$extent" "latest"
        elif  [[ "$prev" == "$ts" ]] && istrue "$dolatest"
        then
            writemap_noover "$ts" "$extent" "previous"
        fi
       
   fi
       
}

###############################################################################
## @brief function to add an include line in the main mapfile
##
## @param ts        timestamp of the layer
##
## @return 0 for success
##
## @details
## global vars
## @param dsname          name of the dataset
## @param outdir          dataset output dir
## @param mapfile         full pathname to the projects main mapfile
##
###############################################################################

addinclude () {
    local ts="$1"

    if ! grep $mapfile -e "${outdir}/${dsname}${ts}.map" > /dev/null
    then
        linenum=$(cat "$mapfile" |\
                   grep -n -e "^[ ]*END[ ]*$" |\
                   tail -n 1 |\
                   cut -d ":" -f 1
                 )

        ed -s "$mapfile" << EOF
${linenum}-1a
  INCLUDE '${outdir}/${dsname}${ts}.map'
.
w
EOF
    fi

}


###############################################################################
## @brief function to add an include line in the NewWorld mapfile
##
## @param ts        timestamp of the layer
##
## @return 0 for success
##
## @details
## global vars
## @param dsname              name of the dataset
## @param outdir              dataset output dir
## @param NewWorld_mapfile    full pathname to the projects main NewWorld_mapfile
##
###############################################################################

addinclude_NewWorld () {
    ts="$1"

    if [ -f "$NewWorld_mapfile" ] &&  ! grep "$NewWorld_mapfile" -e "${outdir}/${dsname}${ts}.map" > /dev/null
    then
        echo "  INCLUDE '${outdir}/NewWorld_${dsname}${ts}.map'" >> "$NewWorld_mapfile"
    fi

}

###############################################################################
## @brief function to add the main mapfile if its missing
##
## @return 0 for success
##
## @details
## global vars
## @param project         name of the project
## @param outdir          dataset output dir
## @param mapfile         full pathname to the projects main mapfile
## @param wms_srs         wms_srs metadata
## @param myprojection    mapserver projection tags
## @param urlcgibin       url for the projects mapserver cgibin
## @param legend          custom legend section
## @param fonset          fontset path
##
###############################################################################

write_main_map () {

    IFS=".-"
    read major minor rev < <( ${mapserverpath}/mapserver-config --version )
    unset IFS

    mapfile_oformat_jpeg="$mapfile_oformat_jpeg_new"
    
    if ((major < 6 ))
    then
        mapfile_oformat_jpeg="$mapfile_oformat_jpeg_old"
    fi

    cat > "$mapfile" << EOF

MAP
  NAME '${project}'
  # Map image size

  SIZE 512 512
  UNITS dd

########  WEST       SOUTH     EAST      NORTH

  EXTENT -180.0  -90.0 180.0  90.0
  
${myprojection}

  # Background color for the map canvas -- change as desired
#  IMAGECOLOR 0 0 0
  IMAGEQUALITY 95
  IMAGETYPE png24

$mapfile_oformat_jpeg
$mapfile_oformat_gtiff
$mapfile_oformat_png

EOF

    ##### legend #####

    if ! [ -n "$legend" ]
    then
        cat >> "$mapfile" << EOF
  ##### legend #####
  
  LEGEND
    STATUS on
    KEYSIZE 500 36
  END

EOF

    else
        cat >> "$mapfile" << EOF
$legend

EOF
    fi

    ##### web section #####

    cat >> "$mapfile" << EOF
  # Web interface definition. Only the template parameter
  # is required to display a map. See MapServer documentation
  WEB
    # Set IMAGEPATH to the path where MapServer should
    # write its output.
    IMAGEPATH '/tmp/'

    # Set IMAGEURL to the url that points to IMAGEPATH
    # as defined in your web server configuration
    IMAGEURL '/tmp/'

    # WMS server settings
    METADATA
      'wms_title'            '${project}'
      'wms_onlineresource'   '${urlcgibin}?SERVICE=WMS'
      'wms_srs'              '${wms_srs}'
      "ows_enable_request"   "*"
    END

  END

EOF

    ###### dadd a fonrtset? #####

    if [ -n "$fontset" ]
    then
        cat >> "$mapfile" << EOF
  FONTSET "$fontset"
EOF
    fi

        cat >> "$mapfile" << EOF

END

EOF

}
