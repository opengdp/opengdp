#!/bin/bash
# Copyright (c) 2011, Brian Case
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

have_otb="@HAVE_OTB@";
have_mrsiddecode="@HAVE_MRSIDDECODE@";

export GDAL_CACHEMAX=500
export GDAL_TIFF_INTERNAL_MASK=YES



###############################################################################
## @brief function to test if an image is 4326
##
## @param   image   full path to the image file
## @param   info    cached gdalinfo string
##
## @return 0 if true 1 if false
##
###############################################################################

image_is_4326() {
    local img="$1"
    local info="$2"

    if [ -n "$info" ]
    then
        info="$(gdalinfo "${img}")"
    fi

    #'GEOGCS."WGS 84", DATUM."WGS_1984", SPHEROID."WGS 84",6378137,298.257223563, AUTHORITY."EPSG","7030".., AUTHORITY."EPSG","6326".., PRIMEM.."Greenwich",0.*., UNIT."degree",0.0174532925199433., AUTHORITY."EPSG","4326"..'
                        #'GEOGCS."WGS 84", DATUM."WGS_1984", SPHEROID."WGS 84",6378137,298.257223563,.* PRIMEM.*"Greenwich",0.*UNIT[[]*"degree".*AUTHORITY."EPSG","4326"\]\][^,]'
    echo $info | grep -q 'GEOGCS."WGS 84", DATUM."WGS_1984", SPHEROID."WGS 84",6378137,298.257223563,.* PRIMEM.*"Greenwich",0.*UNIT[[]*"degree".*AUTHORITY."EPSG","4326"\]\][^,]'
    return $?
}

###############################################################################
## @brief function to test if an image has an alpha band
##
## @param   image   full path to the image file
## @param   info    cached gdalinfo string
##
## @return 0 if true 1 if false
##
###############################################################################

image_has_alpha() {
    local img="$1"
    local info="$2"

    if [ -n "$info" ]
    then
        info="$(gdalinfo "${img}")"
    fi

    grep -q 'ColorInterp=Alpha'<<< "$info"
    return $?
}


###############################################################################
## @brief function to test if an image has a mask band
##
## @param   image   full path to the image file
## @param   info    cached gdalinfo string
##
## @return 0 if true 1 if false
##
###############################################################################

image_has_mask() {
    local img="$1"
    local info="$2"

    if [ -n "$info" ]
    then
        info="$(gdalinfo "${img}")"
    fi

    if grep -q 'Mask Flags: PER_DATASET'<<< "$info" && ! grep -q 'Mask Flags: PER_DATASET ALPHA' <<< "$info"
    then
        return 0
    else
        return 1
    fi

}

###############################################################################
## @brief function to get the number of bands in an image
##
## @param img    full path to the image file
##
## @return 0 for success 1 for failure
## stdout the number of bands
##
###############################################################################

image_get_nbands () {
    local img="$1"
    
    gdalinfo "$img" |\
     grep -e "^Band" |\
     sed 's/^Band \([0-9]*\) .*/\1/' |\
     tail -n 1
     
}

###############################################################################
## @brief function to colar an image
##
## @param img        full path to the input image
## @param tmpram     temp dir to place output in
## @param info       gdalinfo output for image
## @param islossy    flag to mark the image as lossy
## @param isoriginal flag to mark the image as original file (dont delete = true)
##
## @return 0 on success 1 on failure
## stdout the full path to the output file
##
## @details
## global vars
## @param ignorealpha     flag to ignore alpha band
## @param srcnodata       use notadata value as alpha band
## @param nearwhite       colar image with white border
## @param nearboth        colar image with black and white border
## @param nearblack_nb    nearblack nb option to be more agressive on lossy
##
###############################################################################

image_colar () {
    local img="$1"
    local tmpram="$2"
    local info="$3"
    local islossy="$4"
    local isoriginal="$5"
    
    ##### does the image already have a alpha band? #####
    ##### and ignorealpha is not set true #####
    
    if ! istrue "$ignorealpha" && image_has_alpha "${img}" "$info"
    then
        echo "${img}"
        return
    
    ##### does the image already have a mask band? #####
    
    elif image_has_mask "${img}" "$info"
    then
        echo "${img}"
        return
    
    #### use nodata? #####
    
    elif [ -n "$srcnodata" ]
    then
        gdalwarp -srcnodata "$srcnodata" -dstalpha \
                 "${img}" \
                 "${tmpram}/prewarp_${imgbase}.tif" \
                 > /dev/null || { printerror ; return; }
        
    ##### nearblack lossy? #####
    
    elif istrue "$islossy"
    then
        local nb=0

        if [ -n "$nearblack_nb" ]
        then
            local nb="$nearblack_nb"
        fi

        if istrue "$nearwhite"
        then
            nearblack -co TILED=YES -setmask -nb "$nb" -white -of GTiff \
                      "${img}" \
                      -o "${tmpram}/prewarp_${imgbase}.tif" \
                      > /dev/null || { printerror ; return; }
        
        elif istrue "$nearboth"
        then
            nearblack -co TILED=YES -setmask -nb "$nb" -color 0,0,0 -color 255,255,255 -of GTiff \
                      "${img}" \
                      -o "${tmpram}/prewarp_${imgbase}.tif" \
                      > /dev/null || { printerror ; return; }
        
        else
            nearblack -co TILED=YES -setmask -nb "$nb" -of GTiff \
                      "${img}" \
                      -o "${tmpram}/prewarp_${imgbase}.tif" \
                      > /dev/null || { printerror ; return; }
        fi
    
    ##### nearblack non lossy #####
    
    else
        if istrue "$nearwhite"
        then
            nearblack -co TILED=YES -setmask -near 0 -nb 0 -white -of GTiff \
                      "${img}" \
                      -o "${tmpram}/prewarp_${imgbase}.tif" \
                      > /dev/null || { printerror ; return; }
        elif istrue "$nearboth"
        then
            nearblack -co TILED=YES -setmask -near 0 -nb 0 -color 0,0,0 -color 255,255,255 -of GTiff \
                      "${img}" \
                      -o "${tmpram}/prewarp_${imgbase}.tif" \
                      > /dev/null || { printerror ; return; }
        else
            nearblack -co TILED=YES -setmask -near 0 -nb 0 -of GTiff \
                      "${img}" \
                      -o "${tmpram}/prewarp_${imgbase}.tif" \
                      > /dev/null || { printerror ; return; }
        fi
    fi
    
    if ! istrue "$isoriginal" 1
    then
        rm "${img}"
    fi
    
    echo "${tmpram}/prewarp_${imgbase}.tif"
    
    return
}

###############################################################################
## @brief function to warp an image
##
## @param img        full path to the input image
## @param tmpram     temp dir to place output in
## @param info       gdalinfo output for image
## @param isoriginal flag to mark the image as original file (dont delete = true)
##
## @return 0 on success 1 on failure
## stdout the full path to the output file
## 
###############################################################################

image_warp (){
    local img="$1"
    local tmpram="$2"
    local info="$3"
    local isoriginal="$4"
    
    ##### test the projection #####
       
    if image_is_4326 "${img}" "$info"
    then
        echo "${img}"
        return
    
    else
        
        ###### does the image have a alpha band? #####
    
        if image_has_alpha "${img}" "$info"
        then
            ##### fixme gdalwarp seems to be ignoring mask bands #####
            ##### convert alpha mask to a mask band #####
            
            gdal_translate -b 1 -b 2 -b 3 -mask 4 -of VRT \
                           "${img}" \
                           "${tmpram}/prewarp_masked_${imgbase}.vrt" \
                            > /dev/null || { printerror ; return; }
            img="${tmpram}/prewarp_masked_${imgbase}.vrt"
        fi
        
        ##### warp the image #####
        
        gdalwarp -co TILED=YES -dstalpha -t_srs EPSG:4326 \
                 "${img}" \
                 "${tmpram}/warped_${imgbase}.tif" \
                 > /dev/null || { printerror ; return; }
        
    fi
    
    if ! istrue "$isoriginal" 1
    then
        rm "${img}"
    fi
    
    echo "${tmpram}/warped_${imgbase}.tif"
    
    return
}

isoam () {
    local img=$1
    
    local info=$(gdalinfo $img)

    if ! grep -q -e "Driver: GTiff/GeoTIFF" <<< $info || \
       ! grep -q -e "COMPRESSION=YCbCr JPEG" <<< $info || \
       ! grep -q -e "INTERLEAVE=PIXEL" <<< $info || \
       ! grep -q -e "SOURCE_COLOR_SPACE=YCbCr" <<< $info || \
       grep -q "Mask Flags: PER_DATASET ALPHA" <<< "$info" || \
       ! grep -q "Mask Flags: PER_DATASET" <<< "$info"
    then
        return 1
    fi
}


###############################################################################
## @brief function to write an image in oam format
##
## @param img        full path to the input image
## @param tmpram     temp dir to place output in
## @param isoriginal flag to mark the image as original file (dont delete = true)
##
## @return 0 on success 1 on failure
## stdout the full path to the output file
## 
###############################################################################

image_mkoam() {
    local img="$1"
    local tmpram="$2"
    local isoriginal="$3"

    local oam

    ##### is it already oam? #####

    if isoam "$img"
    then
        oam="$img"

    ##### does it have an alpha band? translate to oam #####

    elif image_has_alpha "${img}" "$info"
    then
        gdal_translate -co TILED=YES -co JPEG_QUALITY=80 -co COMPRESS=JPEG \
                       -co PHOTOMETRIC=YCBCR \
                       -b 1 -b 2 -b 3 -mask 4 \
                       "$img" \
                       "${tmpram}/oam_${imgbase}.tif" \
                       > /dev/null || { printerror ; return; }

        if ! istrue "$isoriginal" 1
        then
            rm "$img"
        fi    
        
        oam="${tmpram}/oam_${imgbase}.tif"

    ##### must have a mask band? translate to oam #####

    else
        gdal_translate -co TILED=YES -co JPEG_QUALITY=80 -co COMPRESS=JPEG \
                       -co PHOTOMETRIC=YCBCR \
                       -b 1 -b 2 -b 3 -mask auto \
                       "$img" \
                       "${tmpram}/oam_${imgbase}.tif" \
                       > /dev/null || { printerror ; return; }
    
        if ! istrue "$isoriginal" 1
        then
            rm "$img"
        fi    

        oam="${tmpram}/oam_${imgbase}.tif"

    fi

    echo "$oam"
}

###############################################################################
## @brief function to proccess a single file
##
## @param img        full path to the input image
## @param tmpdir     temp dir to place output in
## @param ts         timestamp of the image
## @param info       gdalinfo output for image
## @param islossy    flag to mark the image as lossy
## @param isoriginal flag to mark the image as original file (dont delete = true)
##
## @return 0 on success 1 on failure
##
## @details
## global vars
## @param ramdisk       if set, temp data will be wrote to a new temp dir here
## @param outdir        datasets output dir
## @param dsname        name of the dataset
## @param isoverview    flag to mark the image as an external overview normaly
##                       set by @see makeoverview
## @param haveomar      true? tell omar there is a new image
##
###############################################################################



dosubimg () {
    local img="$1"
    local tmpdir="$2"
    local ts="$3"
    local info="$4"
    local islossy="$5"
    local isoriginal="$6"

    local imgfile="${img##*/}"
    local imgext=$(file_get_extension "$imgfile")
    local imgbase=$(file_get_basename "$imgfile")
    local imgdir=$(file_get_dir "$img")
    local imgextlower=$(tr "[A-Z]" "[a-z]" <<< "$imgext")
    
    ###### RAMDISK? #####

    if [ -n "$ramdisk" ]
    then
        local tmpram=$(mktemp -d -p "${ramdisk}" "${dsname}XXXXXXXXXX")
    else
        local tmpram=$(mktemp -d -p "${tmpdir}" "${dsname}XXXXXXXXXX")
    fi
    
    ##### colar the image #####
    
    local prewarp
    prewarp=$(image_colar "${tmpdir}/${img}" "${tmpram}" \
                          "$info" "$islossy" "$isoriginal" )  || return
    
    if istrue "$isoriginal" 1 && [[ "$prewarp" != "${tmpdir}/${img}" ]]
    then
        isoriginal="no"
    fi

    ##### warp the image #####
    
    local warped
    warped=$(image_warp "$prewarp" "${tmpram}" \
                        "$info" "$isoriginal" ) || return
    
    if istrue "$isoriginal" 1 && [[ "$warped" != "${tmpdir}/${img}" ]]
    then
        isoriginal="no"
    fi
    
    ##### blend the image #####

    local blended="$warped"
    if istrue "$doblend" && ! istrue "${isoverview}"
    then
        blended=$(blend "$warped" "${tmpram}" "$isoriginal" ) || return
    fi

    if ! istrue "$isoriginal" && [[ "$blended" != "$warped" ]]
    then
        rm "$warped"
    elif [[ "$blended" != "$warped" ]]
    then
        isoriginal="no"
    fi    

    ##### output to oam format #####

    local oam
    oam=$(image_mkoam "$blended" "${tmpram}" "$isoriginal" ) || return

    if ! istrue "$isoriginal" && [[ "$oam" != "$blended" ]]
    then
        rm "$blended"
    elif [[ "$oam" != "$blended" ]]
    then
        isoriginal="no"
    fi    

    
    ##### add overviews #####

    local final="$oam"
    if ! have_addo "$final"
    then
        if istrue "$isoriginal"
        then
            cp "$final" "${tmpram}/final_${imgbase}.tif"
            final="${tmpram}/final_${imgbase}.tif"
            isoriginal="no"
        fi

        addo "$final"
    
    fi

    ##### add a timestamp for indexers #####

    if ! gdalinfo "$final" | grep -q -e "TIFFTAG_DATETIME"
    then
        if istrue "$isoriginal"
        then
            cp "$final" "${tmpram}/final_${imgbase}.tif"
            final="${tmpram}/final_${imgbase}.tif"
            isoriginal="no"
        fi

        tiffset -s 306 \
                "${ts:0:4}:${ts:4:2}:${ts:6:2} 12:00:00" \
                "$final" > /dev/null 2> /dev/null

    fi

    ##### move the output to the outdir #####

    if istrue "$isoriginal"
    then
        cp "$final" "$outdir/${ts}/${imgbase}.tif" || { printerror ; return; }
    else        
        mv "$final" "$outdir/${ts}/${imgbase}.tif" || { printerror ; return; }
    fi

    rm -rf "${tmpram}"

    ##### add the file to the tile index #####
    
    ##### lock! #####
    
    local lock="${outdir}/${dsname}${ts}.shp"
    lock="${lock//\//.}"
    
    while ! mkdir "${lock}" 2> /dev/null
	do
		sleep 1
	done
    
    ##### make the tileindex in a subshell so we can cd with no adverse effect #####
    ##### this costs like 2s of system time per 4000 calls #####

    if [ -n "$isoverview" ]
    then
        (
            cd ${outdir}

            gdaltindex "overview_${dsname}${ts}.shp" "${ts}/${imgbase}.tif"  > /dev/null
        )
    else
 
        (
            cd ${outdir}
            gdaltindex "${dsname}${ts}.shp" "${ts}/${imgbase}.tif"  > /dev/null
        )
    
    fi

    ##### unlock #####
    
    rmdir "${lock}"
    
    if [[ "$haveomar" == "yes" ]]
    then
        curl --data "filename=${outdir}/${ts}/${imgbase}.tif" \
             "${urlbase}/omar/dataManager/addRaster"
    fi
    
}

myrescale () {
    ##### check if the image needs scaled #####
    
    if ! echo "$info" | grep -e Band.1.*Type=Byte > /dev/null && ! [ -n "$rescale" ]
    then
        
        type="$(echo "$info" | grep -e "Band 1 " | sed 's|.*Type=\([a-zA-Z0-9]*\),.*|\1|')"
        case "$type" in

            UInt16)
                local rescale="-32768 32767"
            ;;
            Int16)
                local rescale="0 65535"
            ;;
            UInt32)
                local rescale="-2147483648 2147483647"
            ;;
            Int32)
                local rescale="0 4294967295"
            ;;

            ##### all other types we just let gdal scale with minmax #####

        esac
        
        local doscale=TRUE
    fi

    if [[ "$doscale" == "TRUE" ]] || [ -n "$rescale" ]
    then

        gdal_translate -of VRT -ot byte -scale $rescale \
                       "${tmpdir}/${img}"\
                       "${tmpdir}/${imgdir}${imgbase}_scaled.vrt" > /dev/null


        img="${imgdir}${imgbase}_scaled.vrt"
        imgfile="${img##*/}"
        imgext=$(file_get_extension "$imgfile")
        imgbase=$(file_get_basename "$imgfile")
        
    fi
}


image_cutup_cb () {
    local img="$1"
    local tmpdir="$2"
    local ts="$3"
    local info="$4"
    local isoriginal="$5"
    local islossy="$6"
    local xoff="$7"
    local yoff="$8"
    local xend="$9"
    local yend="${10}"
    
    local imgfile="${img##*/}"
    local imgext=$(file_get_extension "$imgfile")
    local imgbase=$(file_get_basename "$imgfile")
    local imgdir=$(file_get_dir "$img")
    local imgextlower=$(tr "[A-Z]" "[a-z]" <<< "$imgext")
    
    local tmpram
    tmpram=$(mkramtmpdir) || return
    
    ##### translate #####
    
    if [[ "$imgextlower" == "sid" ]]
    then
        if ! [ -n "$have_mrsiddecode" ]
        then
            printerror "opengdp is built without mrsiddecode"
            return 1
        fi
        
        mrsiddecode -ulxy $xoff $yoff \
                    -wh $xend $yend \
                    -s 0 \
                    -i "${tmpdir}/${img}" \
                    -o "${tmpram}/${imgbase}_${xoff}_${yoff}.tif" \
                    > /dev/null || { printerror ; return; }

        ##### mrsiddecode does not copy the srs if the srs is in a aux file so we need to copy it #####
            
        if grep -e "PROJCS.*\]\][^,]" <<< $info > /dev/null
        then
            local srs="$(sed s/'.*\(PROJCS.*\]\][^,]\).*/\1/' <<< $info)"
            gdal_translate -of VRT \
                           -a_srs "$srs" \
                           "${tmpram}/${imgbase}_${xoff}_${yoff}.tif" \
                           "${tmpram}/${imgbase}_${xoff}_${yoff}.vrt" \
                           > /dev/null || { printerror ; return; }
        else
            echo "ERROR: no srs for ${tmpram}/${imgbase}_${xoff}_${yoff}.tif"
            ls -l ${tmpram}/
            rm -rf "$tmpram"
            return
        fi

        dosubimg "${imgbase}_${xoff}_${yoff}.vrt" \
                 "$tmpram" "$ts" \
                 "$(gdalinfo "${tmpram}/${imgbase}_${xoff}_${yoff}.vrt")" \
                 "$islossy" "no" || return
        
        ###### rm the tif #####

        rm "${tmpram}/${imgbase}_${xoff}_${yoff}.tif"
    
    ##### if its ecw then use a tif for the temp step. libecw + nearblack = fail #####

    elif [[ "$imgextlower" == "ecw" ]] || [[ "$imgextlower" == "vrt" ]] && grep "${tmpdir}/${img}" -e "SourceFilename.*[.]ecw<" > /dev/null
    then
        gdal_translate -srcwin $xoff $yoff $xend $yend \
                       "${tmpdir}/${img}"\
                       "${tmpram}/${imgbase}_${xoff}_${yoff}.tif" \
                       > /dev/null || { printerror ; return; }
    
        dosubimg "${imgbase}_${xoff}_${yoff}.tif" \
                 "$tmpram" "$ts" \
                 "$(gdalinfo "${tmpram}/${imgbase}_${xoff}_${yoff}.tif")" \
                 "true" "no" || return
        
    ##### any other kind of image #####

    else
        gdal_translate -of VRT -srcwin $xoff $yoff $xend $yend  \
                       "${tmpdir}/${img}"\
                       "${tmpram}/${imgbase}_${xoff}_${yoff}.vrt" \
                       > /dev/null || { printerror ; return; }
    
        dosubimg "${imgbase}_${xoff}_${yoff}.vrt" \
                 "$tmpram" "$ts" \
                 "$(gdalinfo "${tmpram}/${imgbase}_${xoff}_${yoff}.vrt")" \
                 "$islossy" "no" || return
    fi
    
    rm -rf "$tmpram"

}

###############################################################################
## @brief function to test if an image is blank
##
## @param img        full path to the input image
## @param tmpdir     temp dir to place temp file in

## @return 0 on blank 1 on non blank
##
## @details
## this fuction is pretty cheap on 1 bit mask bands but more costly on
## 1 byte alpha bands
##
###############################################################################

image_isblank () {
    local img="$1"
    local tmpdir="$2"

    local type=$(mask_info "$img")

    ###### does it have a mask band? #####

    if [[ "$type" == "MASK" ]]
    then
        gdal_translate -b mask -of VRT \
                       "$img" \
                       "${tmpdir}/isblank_${imgbase}.vrt" > /dev/null

    ###### does it have a alpha band? #####

    elif [[ "$type" == "ALPHA" ]]
    then
        gdal_translate -b 4 -of VRT \
                       "$img" \
                       "${tmpdir}/isblank_${imgbase}.vrt" > /dev/null
    
    ##### assume its not blank then #####
    else
        return 1

    fi

    local mm=$( gdalinfo "${tmpdir}/isblank_${imgbase}.vrt" -mm )
    rm "${tmpdir}/isblank_${imgbase}.vrt"

    if grep -q -e "Computed Min/Max=0.000,255.000" <<< $mm
    then
        return 1
    fi

    ##### its blank if we got here #####

}

###############################################################################
## @brief function to bust a larger image into chunks and proccess
##
## @param img        full path to the input image
## @param tmpdir     temp dir to place output in
## @param ts         timestamp of the image
## @param info       gdalinfo output for image
## @param isoriginal flag to mark the image as original file (dont delete = true)
##
## @return 0 on success 1 on failure
##
###############################################################################

image_cutup () {    
    local img="$1"
    local tmpdir="$2"
    local ts="$3"
    local info="$4"
    local islossy="$5"
    local isoriginal="$6"
    local cutup_func="$7"
    local doimg_func="$8"
    
    local imgfile="${img##*/}"
    local imgext=$(file_get_extension "$imgfile")
    local imgbase=$(file_get_basename "$imgfile")
    local imgdir=$(file_get_dir "$img")
    local imgextlower=$(tr "[A-Z]" "[a-z]" <<< "$imgext")
    
    ##### get the xy size in pixels #####
    
    local x y
    read x y < <(get_size "" "$info")
    
    local cutat=16384

    ##### is the img too big? #####

    if ! istrue "$nocut" && ( (( x > cutat )) || (( y > cutat )) )
    then
        
        ##### loop over x #####
        
        local xsize xoff xend
        xsize=$cutat
        
        
        for ((xoff = 0; xoff < x; xoff += cutat))
        do
            
            ##### set the x size of the sub img #####
            
            if ((xoff + xsize >= x))
            then
                ((xsize = x - xoff))
            fi
            
            ##### calc xend #####
            
            (( xend = xoff + xsize < x ? xsize + 1 : xsize ))
            
            ##### loop over y #####
            
            local ysize yoff yend
            ysize=$cutat
            for ((yoff = 0; yoff < y; yoff += cutat))
            do
                
                ##### set the y size of the sub img #####
                
                if ((yoff + ysize >= y))
                then
                    ((ysize = y - yoff))
                fi
                
                ##### calc yend #####
                
                (( yend = yoff + ysize < y ? ysize + 1 : ysize))

                ##### proccess #####
                
                "$cutup_func" "${img}" "$tmpdir" "$ts" \
                              "$info" "$isoriginal" "$islossy" \
                              "$xoff" "$yoff" "$xend" "$yend" || return
                
            done
        done
    
    ##### its not too big do the image as is #####
    
    else
    
        "$doimg_func" "${img}" "$tmpdir" "$ts" \
                      "$info" "$islossy" "$isoriginal" || return
    fi

}

###############################################################################
## @brief function to bust a larger image into chunks and proccess
##
## @param img        full path to the input image
## @param tmpdir     temp dir to place output in
## @param ts         timestamp of the image
## @param info       gdalinfo output for image
## @param isoriginal flag to mark the image as original file (dont delete = true)
##
## @return 0 on success 1 on failure
##
## @details
## global vars
## @param isoverview    flag to mark the image as an external overview normaly
##                       set by makeoverview
## @param haveomar      true? tell omar there is a new image
## @param s_srs         var to overide set projection
## @param bnw           flag to mark the image as black n white
## @param force_islossy flag to force treatment the of image as a lossy format
## have_mrsiddecode     flag set by automake if the system has mrsid
##
## @see makeoverview
##
###############################################################################

doimg () {
    local img="$1"
    local tmpdir="$2"
    local ts="$3"
    local info="$4"
    local isoriginal="$5"
    
    local imgfile="${img##*/}"
    local imgext=$(file_get_extension "$imgfile")
    local imgbase=$(file_get_basename "$imgfile")
    local imgdir=$(file_get_dir "$img")
    local imgextlower=$(tr "[A-Z]" "[a-z]" <<< "$imgext")
    
    ##### double check the info #####
    
    if [ -n "$info" ]
    then
        info="$(gdalinfo "${tmpdir}/${img}")"
    fi
   
    ##### test if the image is in a lossy format #####
     
    if istrue "$force_islossy" || grep -e "COMPRESSION=.*JP" <<< "$info" > /dev/null || \
       [[ "$imgextlower" == "sid" ]] || [[ "$imgextlower" == "pdf" ]]
    then
        local islossy=true
    fi
    
    ##### do we need to add a srs to the image #####
    
    if  [ -n "$s_srs" ] && ! [ -n "$isoverview" ]
    then
        ##### create a vrt with the proj #####
        
        gdal_translate -a_srs "$s_srs" \
                       -of VRT -mask none \
                       "${tmpdir}/${img}" \
                       "${tmpdir}/${imgdir}${imgbase}_srs.vrt" > /dev/null || { printerror ; return; }

        img="${imgdir}${imgbase}_srs.vrt"
        imgfile="${img##*/}"
        imgext=$(file_get_extension "$imgfile")
        imgbase=$(file_get_basename "$imgfile")
        info="$(gdalinfo "${tmpdir}/${img}")"
    fi

    ##### does the image have a colortable? #####

    if grep -e "Color Table" <<< "$info" > /dev/null
    then

        local cttype

        ##### rgba #####

        if grep -A1 -e "Color Table" <<< "$info"  |\
            grep -A1 -e "Color Table" | tail -n 1 |\
            grep -q -e "[0-9]*,[0-9]*,[0-9]*,[0-9]*"
        then
            cttype="rgba"
        else
            cttype="rgb"
        fi

        ##### create a expanded vrt #####
        
        gdal_translate -expand "$cttype" \
                       -of VRT -mask none \
                       "${tmpdir}/${img}" \
                       "${tmpdir}/${imgdir}${imgbase}_expand.vrt" > /dev/null || { printerror ; return; }  

        img="${imgdir}${imgbase}_expand.vrt"
        imgfile="${img##*/}"
        imgext=$(file_get_extension "$imgfile")
        imgbase=$(file_get_basename "$imgfile")
        info="$(gdalinfo "${tmpdir}/${img}")"
    fi

    ##### is the image bnw? #####
    
    if istrue "$bnw"
    then
        gdalbuildvrt -separate "${tmpdir}/${imgdir}${imgbase}_bnw.vrt" "${tmpdir}/${img}" "${tmpdir}/${img}" "${tmpdir}/${img}"
        
        img="${imgdir}${imgbase}_bnw.vrt"
        imgfile="${img##*/}"
        imgext=$(file_get_extension "$imgfile")
        imgbase=$(file_get_basename "$imgfile")
        info="$(gdalinfo "${tmpdir}/${img}")"
    fi
    
    ##### if the overview tileindex already exists remove it       #####
    ##### the geometry will not be updated otherwise and mapserver #####
    ##### may not display the data at some zoom levels             #####

    if [ -n "$isoverview" ] && [ -f "${outdir}/overview_${dsname}${ts}.shp" ]
    then
        rm "${outdir}/overview_${dsname}${ts}.shp"
    fi

    image_cutup "${img}" "$tmpdir" "$ts" \
                "$info" "$islossy" "$isoriginal" "image_cutup_cb" "dosubimg"
        

}

###############################################################################
## @brief function rebuild the tile indexes for a ds
##
## @details
## global vars
## @param outdir        datasets output dir
## @param dsname        name of the dataset
##
###############################################################################

rebuildtindexs () {

    ##### remove the old tindexs #####
    
    for shp in $(find ${outdir} -name "${dsname}[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].shp")
    do
        local base="${shp%.*}"
        for ext in shp dbf prj shx
        do
            rm "${base}.${ext}"
        done
    done
    
    ##### do we have image data? #####

    if ! istrue "$vector"
    then

        ##### make the new tindexs #####
        
        for img in ${outdir}/*/*.tif
        do
            local imgfile="${img##*/}"
            local ts=$( sed 's:.*/\([0-9]\{8\}\).*:\1:' <<<"$img")
            local imgfile=$( sed "s:.*/$ts/\(.*\):\1:" <<<"$img")
            if [[ "$imgfile" != overview* ]]
            then
                
                ##### make the tileindex in a subshell so we can cd with no adverse effect #####
                ##### this costs like 2s of system time per 4000 calls #####

               (
                   cd ${outdir}
                   gdaltindex "${dsname}${ts}.shp" "${ts}/${imgfile}"  > /dev/null
               )
            fi
        done

    ##### do we have vector data? #####

    else
        for img in $(find ${outdir} -mindepth 2 -iname "*.shp")
        do
            local imgfile="${img##*/}"
            local ts=$( sed 's:.*/\([0-9]\{8\}\).*:\1:' <<<"$img")
            local imgfile=$( sed "s:.*/$ts/\(.*\):\1:" <<<"$img")
            if [[ "$imgfile" != overview* ]]
            then
                
                ##### make the tileindex in a subshell so we can cd with no adverse effect #####
                ##### this costs like 2s of system time per 4000 calls #####

               (
                   cd ${outdir}

                   ogrtindex -write_absolute_path \
                             -accept_different_schemas \
                             "${dsname}${ts}.shp" \
                             "${ts}/${imgfile}" > /dev/null

               )
            fi
        done
    
    fi
}

