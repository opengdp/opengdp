#!/bin/bash
# Copyright (c) 2011, Brian Case
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


have_hdf="@HAVE_HDF@";



###############################################################################
## @brief function to process a zip in a multiband case
##
## @param zipfile    zip file its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param subdsnames  array of subdsnames
## @param msbands     arrays of band filename patterns to use
## @param panband     panban panband filename pattern to use
##
###############################################################################

dozip_multiband () {

    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    
    local file="${zipfile##*/}"
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
    
    local zipinfo="$(myzipinfo "${origdir}/${zipfile}")"

    ##### for now we just assume tiff, id like to make this better later #####
    
    local i=0
    local files
    local msband
    
    ##### loop over the subdataset array #####
    # FIXME add mask bands
    if [[ ${#subdsnames[@]} == 0 ]]
    then
        local subdsnames=( "" )
    fi
    local sub
    for sub in "${subdsnames[@]}"
    do
        local tmp
        eval tmp=\( \$\{msbands$sub\[@\]\} \)
        local mymsbands=( "${tmp[@]}" )
        unset tmp
        local tmp
        eval tmp=\"\$panband$sub\"
        local mypanband="$tmp"
        unset tmp
        for msband in "${mymsbands[@]}"
        do
            local regex="${msband//./[.]}"
            local regex="${regex//\*/.*}"
            local regex="${regex//\?/.}"

            if grep -i -e "$regex" <<<"$zipinfo" > /dev/null
            then
                local bandfile="$(grep -i -e "$regex" <<<"$zipinfo" | head -n 1)"
                if ! isinarray "$bandfile" "${files[@]}"
                then
                    files[i++]="$bandfile"
                fi
            else
                echo "ERROR: no match in zip for \"$msband\""
                return;
            fi
        
        done
    
        ##### find the pan band #####
        ##### FIXME this only assumes 1 posible panband #####
        
        local panfiles
        if [ -n "$mypanband" ]
        then
            
            local regex="${mypanband//./[.]}"
            local regex="${regex//\*/.*}"
            local regex="${regex//\?/.}"
            
            if grep -i -e "$regex" <<<"$zipinfo" > /dev/null
            then
                panfiles[0]="$(grep -i -e "$regex" <<<"$zipinfo" | head -n 1)"
            else
                echo "ERROR: no match in zip for \"$mypanband\""
                return;
            fi
        fi
    
    done
    
    ##### extract the files #####
        
    unzip "${origdir}/${zipfile}" \
           ${files[@]} \
           ${panfiles[@]} \
           -d "$tmpdir" > /dev/null 2> /dev/null || { printerror ; return; }
    
    doimg_multiband "$base" "$tmpdir" "$ts" "no" "${panfiles[0]}" ${files[@]}
    
}

###############################################################################
## @brief function to process a tar in a multiband case
##
## @param zipfile    tar file its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param subdsnames  array of subdsnames
## @param msbands     arrays of band filename patterns to use
## @param panband     panban panband filename pattern to use
##
###############################################################################

dotar_multiband () {

    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    
    local file="${zipfile##*/}"
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
        
    ##### find the 
    case "$ext" in
        
        *tar)
            local switch=""
            ;;
                
        *tar.gz)
            local switch="z"
            ;;
        
        *tgz)
            local switch="z"
            ;;
            
        *tar.bz2)
            local switch="j"
            ;;
    esac
    
    zipinfo="$(tar -t${switch}f "${origdir}/${zipfile}")"

    ##### for now we just assume tiff, id like to make this better later #####
    #FIXME add mask bands
    local i=0
    local files
    ##### loop over the subdataset array #####
    
    if [[ ${#subdsnames[@]} == 0 ]]
    then
        local subdsnames=( "" )
    fi
    local sub
    for sub in "${subdsnames[@]}"
    do
        local tmp
        eval tmp=\( \$\{msbands$sub\[@\]\} \)
        local mymsbands=( "${tmp[@]}" )
        unset tmp
        local tmp
        eval tmp=\"\$panband$sub\"
        local mypanband="$tmp"
        unset tmp

        local msband
        for msband in "${mymsbands[@]}"
        do
            local regex="${msband//./[.]}"
            local regex="${regex//\*/.*}"
            local regex="${regex//\?/.}"

            if grep -i -e "$regex" <<<"$zipinfo" > /dev/null
            then
                local bandfile="$(grep -i -e "$regex" <<<"$zipinfo" | head -n 1)"
                if ! isinarray "$bandfile" "${files[@]}"
                then
                    files[i++]="$bandfile"
                fi
            else
                echo "ERROR: no match in zip for \"$msband\""
                return;
            fi
        
        done
    
        ##### find the pan band #####
        ##### FIXME this only assumes 1 posible panband #####
        
        local panfiles
        if [ -n "$mypanband" ]
        then
            
            local regex="${mypanband//./[.]}"
            local regex="${regex//\*/.*}"
            local regex="${regex//\?/.}"
            
            if grep -i -e "$regex" <<<"$zipinfo" > /dev/null
            then
                panfiles[0]="$(grep -i -e "$regex" <<<"$zipinfo" | head -n 1)"
            else
                echo "ERROR: no match in zip for \"$mypanband\""
                return;
            fi
        fi
    
    done
        
    ##### extract the files #####
        
    tar -x${switch}f "${origdir}/${zipfile}" \
        -C "$tmpdir" \
        ${files[@]} \
        ${panfiles[@]} > /dev/null 2> /dev/null || { printerror ; return; }
                
    doimg_multiband "$base" "$tmpdir" "$ts" "no" "${panfiles[0]}" ${files[@]}
    
}

###############################################################################
## @brief function to take a list of files on stdin and make a bash array declaration
## script of files with the same basename in each array
## this produces one local array per line named files
##
## @param ext    the extension on the files to mach associated files to
## @param stdin  PIPE of files names to search
##
## note this function creates bash arrays that are outputed to stdout to be
## eval by the calling function
## 
###############################################################################

find_asoc_files () {
    ext="$1"
    
    awk -v "ext=$ext" '

BEGIN {
    FS = "\n" ;
}


{
    re = "[.]" ext "$";
        
    names[i++] = $NF;
    if ( $NF ~ re ) {
        split($NF, base, re);
        bases[b++] = base[1];
        images[base[1]] = $NF;
    }

}

END {
    for (ibase in bases) {
        if ( "shp" ~ ext ) {
            res[1] = bases[ibase] ".*[.][Dd][Bb][Ff]$";
            res[2] = bases[ibase] ".*[.][Ss][Hh][Xx]$";
            res[3] = bases[ibase] ".*[.][Pp][Rr][Jj]$";
        } else if ( "bil" ~ ext ) {
            res[1] = bases[ibase] "[.]..[Ww]$";
            res[2] = bases[ibase] ".*[.][Hh][Dd][Rr]$";
            res[3] = bases[ibase] ".*[.][Pp][Rr][Jj]$";
        } else {
            res[1] = bases[ibase] "[.]..[Ww]$";
            res[2] = bases[ibase] ".*[.][Aa][Uu][Xx]$";
            res[3] = bases[ibase] ".*[.][Aa][Uu][Xx][.][Xx][Mm][Ll]$";
        }

        i = 0;
        files[i++] = images[bases[ibase]];
        for (iname in names) {
            for ( ire in res ) {
                if ( names[iname] ~ res[ire] ) {
                   files[i++] = names[iname];
                }
            }
        }
        
        printf ( "local files=(" );
        for ( ifile in files ) {
            printf( " \"%s\"", files[ifile] );
        }
        
        printf ( " )\n" );
        for (ifile in files) {
            delete files[ifile];
        }
           
    }
}
'
}




###############################################################################
## @brief function to process a gzip file
##
## @param zipfile    gzip file its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param vector
## @param msbands
##   
###############################################################################

dogzip () {
    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
    
    #### extract the files #####
    
    zcat "${origdir}/${zipfile}" > "${tmpdir}/${base}" || { printerror ; return; }
    
    ##### do we have image data? #####

    if ! istrue "$vector"
    then

        ##### check if it is suposed to be multiband #####
        ##### FIXME subdsnames could not contain a "" so check the first one and append to msbands #####
        
        if [ -n "$msbands" ]
        then
            local files=( "$base" )
            doimg_multiband "$base" "$tmpdir" \
                            "$ts" "no" "${panfiles[0]}" \
                            ${files[@]}
            
        else
            doimg "$base" "$tmpdir" "$ts" "$(gdalinfo "${tmpdir}/${base}")" "no"
        
        fi

    ##### do we have vector data? #####

    else
        dovector "$base" "$tmpdir" "$ts" "$(ogrinfo -so -al "${tmpdir}/${base}")" "no"

    fi

}

###############################################################################
## @brief function to process a bzip file
##
## @param zipfile    bzip file its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param vector
## @param msbands
##   
###############################################################################

dobzip () {
    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
    
    #### extract the files #####
    
    bzcat "${origdir}/${zipfile}" > "${tmpdir}/${base}" || { printerror ; return; }

    ##### do we have image data? #####

    if ! istrue "$vector"
    then

        ##### check if it is suposed to be multiband #####
        
        if [ -n "$msbands" ]
        then
            local files=( "$base" )
            doimg_multiband "$base" "$tmpdir" \
                            "$ts" "no" "${panfiles[0]}" \
                            ${files[@]}
            
        else
            doimg "$base" "$tmpdir" "$ts" "$(gdalinfo "${tmpdir}/${base}")" "no"
        
        fi

    ##### do we have vector data? #####

    else
        dovector "$base" "$tmpdir" "$ts" "$(ogrinfo -so -al "${tmpdir}/${base}")" "no"

    fi
}

imagepriority= "[.]tif$ [Tt][Ii][Ff]
                [.]sid$ [Ss][Ii][Dd]
                [.]jp2$ [Jj][Pp]2
                [.]bil$ [Bb][Ii][Ll]
                [.]png$ [Pp][Nn][Gg]
                [.]jpg$ [Jj][Pp][Gg]
                [.]gif$ [Gg][Ii][Ff]
                [.]grd$ [Gg][Rr][Dd]"

vectorpriority= "[.]shp$ [Ss][Hh][Pp]"

###############################################################################
## @brief function to process a zip file
##
## @param zipfile    zip file its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param vector
## @param msbands
## @param extglob
##   
###############################################################################

dozip () {
    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    
    ##### check if it is suposed to be multiband #####
    
    if ! istrue "$vector" && [ -n "$msbands" ]
    then
        dozip_multiband "$zipfile" "$tmpdir" "$ts" "$origdir"
        return
    fi
    
    zipinfo=$(myzipinfo "${origdir}/${zipfile}")
    
    ##### if exglob is set get a list of those files #####
    
    local regex="${extglob//./[.]}"
    local regex="${regex//\*/.*}"
    local regex="${regex//\?/.}"
    local iext
    
    local priority

    if ! istrue "$vector"
        priority="$imagepriority"
    else
        priority="$vectorpriority" 
    fi

    if [ -n "$extglob" ] && grep -i -e "^$regex$" <<<"$zipinfo" > /dev/null
    then
        local firstfile=$(grep -i -e "^$regex$" <<<"$zipinfo" | head -n 1)
        iext="${firstfile##*.}"

    else
        local ext
        local rx
        while read ext rx
        do
            if grep -q -i -e "$ext" <<<"$zipinfo"
            then
                iext="$rx"
                break;
            fi
        done <<<"$priority"

    fi
    
    if [[ -z "$iext" ]]
    then
        return 1
    fi
        
    ##### loop over the matching files #####
        
    while read -r line
    do

        eval $line

        ##### extract the files #####
            
        unzip "${origdir}/${zipfile}" \
              ${files[@]} \
              -d "$tmpdir" > /dev/null 2> /dev/null || { printerror ; return; }
    
            
        if ! istrue "$vector"    
        then
            ##### proccess the images #####
            
            doimg "${files[0]}" "$tmpdir" "$ts" "$(gdalinfo "${tmpdir}/${files[0]}")" "no" || return

        else
        
            ##### proccess the vectors #####

            dovector "${files[0]}" "$tmpdir" "$ts" "$(ogrinfo -so -al "${tmpdir}/${files[0]}")" "no" || return

        fi

    done < <( find_asoc_files "$iext" <<<"$zipinfo" )
    
}

###############################################################################
## @brief function to process a tar.gz file
##
## @param zipfile    tar file its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param vector
## @param msbands
## @param extglob
##   
###############################################################################

dotar () {
    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    
    ##### check if it is suposed to be multiband #####
    
    if ! istrue "$vector" && [ -n "$msbands" ]
    then
        dotar_multiband "$zipfile" "$tmpdir" "$ts" "$origdir"
        return
    fi
        
    local file="${zipfile##*/}"
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
    
    ##### find the 
    case "$ext" in
        
        *tar)
            local switch=""
            ;;
                
        *tar.gz)
            local switch="z"
            ;;
        
        *tgz)
            local switch="z"
            ;;
            
        *tar.bz2)
            local switch="j"
            ;;
    esac
    
    zipinfo="$(tar -t${switch}f "${origdir}/${zipfile}")"
    
    ##### if exglob is set get a list of those files #####
    
    local regex="${extglob//./[.]}"
    local regex="${regex//\*/.*}"
    local regex="${regex//?/.}"
    local iext
    
    local priority

    if ! istrue "$vector"
        priority="$imagepriority"
    else
        priority="$vectorpriority" 
    fi

    if [ -n "$extglob" ] && grep -i -e "^$regex$" <<<"$zipinfo" > /dev/null
    then
        local firstfile=$(grep -i -e "^$regex$" <<<"$zipinfo" | head -n 1)
        iext="${firstfile##*.}"

    else
        local ext
        local rx
        while read ext rx
        do
            if grep -q -i -e "$ext" <<<"$zipinfo"
            then
                iext="$rx"
                break;
            fi
        done <<<"$priority"

    fi
    
    if [[ -z "$iext" ]]
    then
        return 1
    fi
        
    ##### loop over the matching files #####
        
    while read -r line
    do

        eval $line

        ##### extract the files #####
        
        tar -x${switch}f "${origdir}/${zipfile}" \
            -C "$tmpdir" \
            ${files[@]} > /dev/null 2> /dev/null || { printerror ; return; }
        
        if ! istrue "$vector"    
        then
            ##### proccess the images #####
            
            doimg "${files[0]}" "$tmpdir" "$ts" "$(gdalinfo "${tmpdir}/${files[0]}")" "no" || return

        else
        
            ##### proccess the vectors #####

            dovector "${files[0]}" "$tmpdir" "$ts" "$(ogrinfo -so -al "${tmpdir}/${files[0]}")" "no" || return

        fi

    done < <( find_asoc_files "$iext" <<<"$zipinfo" )

}

###############################################################################
## @brief function to process a kmz file
##
## @param zipfile    kmzfile its assumed to be in origdir
## @param tmpdir     temp dir to store output in
## @param ts         timestamp of the current file
## @param origdir    dir the original files are in
##
## @return 0 on success, 1 on fail
##
## @details
## global vars
## @param baseglob glob to use to search the kmz zip for the kml
##
###############################################################################

dokmz () {
    local zipfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    local f
    
    local file="${zipfile##*/}"
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
    
    for f in $(myzipinfo "${origdir}/${zipfile}" "$baseglob.kml")
    do

        ##### extract the kml #####
        
        unzip "${origdir}/${zipfile}" "$f" -d "$tmpdir" || { printerror ; return; }
        
        ##### find and extract the corisponding img #####
        
        local img=$(grep '<GroundOverlay>' -A12 "${tmpdir}/$f" |\
                    grep href | sed -r 's|.*<href>(.*)</href>.*|\1|')
        
        unzip "${origdir}/${zipfile}" "$img" -d "$tmpdir" || { printerror ; return; }
        

        local imgfile="${img##*/}"
        local imgext=$(file_get_extension "$imgfile")
        local imgbase=$(file_get_basename "$imgfile")
        local imgdir=$(file_get_dir "$img")
        
        ##### get the corner quords #####
        
        read n s e w < <(grep '<GroundOverlay>' -A12 "${tmpdir}/$f" |\
                          grep north -A3 |\
                          sed 's:<[/a-z]*>::g' |\
                          tr "\n" " ")
        
        ##### create a vrt with the proj #####
        
        gdal_translate -a_srs EPSG:4326 \
                       -a_ullr $w $n $e $s \
                       -of VRT -mask none \
                       "${tmpdir}/${img}" \
                       "${tmpdir}/${imgdir}/${base}_${imgbase}.vrt" || { printerror ; return; }
        
        ##### proccess #####
        
        doimg "${imgdir}/${base}_${imgbase}.vrt" "$tmpdir" "$ts" \
              "$(gdalinfo "${tmpdir}/${imgdir}/${base}_${imgbase}.vrt")" \
              "no" || return
    done

}



###############################################################################
## @brief function loop over the subdataset array and call a callback function
##
## @param cbfunc     callback function
## @param cbargs     array of args to pass to the callback function
##
## @return 0 on success, 1 on fail of the callback
##
## @details
## global vars
## @param subdsnames      array of subdsnames
## @param msbands*        arrays of band filename patterns
## @param msmaskbands*    array of mask bands
## @param mspreproc_lut*  lut to scale bands with before any other proccessing
## @param panband*        panban panband filename pattern
## @param mscalc*         ITK calculation to build a product
## @param lut*            lut to recale output
## @param msgradient*     gradient to colorize single band image
## @param mskey*          scale to use building a key image
## @param mskeylabel*     units label to add to the key image
## 
###############################################################################

subds_iterator () {
    local cbfunc="$1"
    local cbargs=("${@:2}")
    
    ##### if no sub ds names just exec the cb func #####
        
    if [[ ${#subdsnames[@]} == 0 ]]
    then
        "$cbfunc" "${cbargs[@]}" || return
    
    ##### loop over the subdataset array #####
    
    else
    
        local sub
        for sub in "${subdsnames[@]}"
        do
            (
                outdir="${outdir}${sub}"
                dsname="${dsname}${sub}"
                
                local tmp
                eval tmp=\( \$\{msbands$sub\[@\]\} \)
                local msbands=( "${tmp[@]}" )
                unset tmp
                
                local tmp
                eval tmp=\( \$\{msmaskbands$sub\[@\]\} \)
                local msmaskbands=( "${tmp[@]}" )
                unset tmp

                local tmp
                eval tmp=\( \$\{mspreproc_lut$sub\[@\]\} \)
                local mspreproc_lut=( "${tmp[@]}" )
                unset tmp

                local tmp
                eval tmp=\"\$panband$sub\"
                local panband="$tmp"
                unset tmp
                
                local tmp
                eval tmp=\"\$mscalc$sub\"
                local mscalc="$tmp"
                unset tmp
                
                local tmp
                eval tmp=\"\$lut$sub\"
                local lut="$tmp"
                unset tmp
                
                local tmp
                eval tmp=\"\$msgradient$sub\"
                local msgradient="$tmp"
                unset tmp
                
                local tmp
                eval tmp=\"\$mskey$sub\"
                local mskey="$tmp"
                unset tmp
                
                local tmp
                eval tmp=\"\$mskeylabel$sub\"
                local mskeylabel="$tmp"
                unset tmp
                
                "$cbfunc" "${cbargs[@]}" || return
            ) || return
        done
    fi
}
    
###############################################################################
## @brief function to get the pan band from an array of files
##
## @param files      array of files to search
##
## @details
## global vars
## @param panband*        panban panband filename pattern
##
###############################################################################



findpan () {
    local files=("${@:1}")
    
    ##### find the pan band #####
    ##### FIXME this only assumes 1 posible panband #####
    
    subds_iterator "findpan_cb" "${files[@]}" | head -n 1
    
}

findpan_cb () {
    local files=("${@:1}")
    
    if [ -n "$panband" ]
    then
        find_band_file "$panband" "${files[@]}" || { printerror ; return; }
    fi
}

###############################################################################
## @brief function to get the basename of a set of ms files
##
## @param files      array of files to search
##
## @details
## global vars
## @param msbands*        arrays of band filename patterns
##
###############################################################################

getms_base () {
    local files=("${@:1}")
    
    ##### find the base name #####

    subds_iterator "getms_base_cb" "${files[@]}" | head -n 1
    
}

getms_base_cb () {
    local files=("${@:1}")
    
    if [ -n "$panband" ]
    then
        local msb
        for msb in "${msbands[@]}"
        do
            find_band_file "$msb" "${files[@]}" | sed 's/'"$msb"'.*//'
        done
    fi
}


###############################################################################
## @brief function to decide howto deal with a file
##
## @param file       main file to proccess
## @param ext        extension of the main file
## @param tmpdir     temp dir to use for proccessing
## @param ts=        timestamp of this file
## @param origdir    dir all files are assumed to be in
## @param files      array of the file and its asociated files
##
## 
###############################################################################

dofile_sub () {
    local file="$1"
    local ext="$2"
    local tmpdir="$3"
    local ts="$4"
    local origdir="$5"
    local files=("${@:6}")
    
    local base=$(file_get_basename "$file")
    
    case "$ext" in
        
        *tar)
            dotar "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
        
        *tar.gz)
            dotar "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
        
        *tgz)
            dotar "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
        
        *tar.bz2)
            dotar "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
        
        bz2)
            dobzip "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
        
        gz)
            dogzip "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
        
        *zip)
            dozip "${file}" "$tmpdir" "$ts" "$origdir"
            ;;
            
        *kmz)
            if ! istrue "$vector"
            then
                dokmz "${file}" "$tmpdir" "$ts" "$origdir"
            fi
            ;;
        
        *hdf)
            if ! istrue "$vector"
            then
                if [ -n "$have_hdf" ]
                then
                    dohdf "${file}" "$tmpdir" "$ts" "$origdir" ${files[@]}
                else
                     printerror "opengdp is built without hdf support"
                fi
            fi
            
            ;;
        
        *)

            if ! istrue "$vector"
            then
                if gdalinfo "${origdir}/${file}" > /dev/null
                then
                    
                    ##### check if it is suposed to be multiband #####
    
                    if [ -n "$msbands" ]
                    then
                        
                        ##### get the base name #####
                        
                        doimg_multiband $( getms_base "${files[@]}" ) \
                                        "$tmpdir" \
                                        "$ts" \
                                        "yes" \
                                        $( findpan "${files[@]}" ) \
                                        "${files[@]}"
                    
                    else
                    
                        doimg "${file}" \
                              "$tmpdir" \
                              "$ts" \
                              "$(gdalinfo ${origdir}/$file)" \
                              "yes"
                    
                    fi
                else
                    if ogrinfo "${origdir}/${file}" > /dev/null
                    then
                                
                        dovector "${file}" \
                                 "$tmpdir" \
                                 "$ts" \
                                 "$(ogrinfo -al -so ${origdir}/$file)" \
                                 "yes"
                    fi
                fi
            fi    
            
            ;;
    esac
    
}

##### function to sub the tmp dir in for a lftp fetch

subtmplftp() {\
    local tmpdir="$1"

    sed "s:get \([-]. \)\{1,\}[-/_.A-Za-z0-9]*:get \1${tmpdir}:g"
}

###############################################################################
## @brief function to proccess a file
## 
## @param myline     line from a ftp mirror file or a url for NewEarthExplorer
##
## @details
## global vars
## @param indir                   dir the original file(s) will be placed in
## @param outdir                  dir to place the output in
## @param NewEarthExplorer_user   username for the NewEarthExplorer login if this is
##                            set myline is assumed to be a NewEarthExplorer url
## @param OPENGDP_REBUILD             flag to say if were in rebuild mode -rebuild
## @param tmp                     the temp dir
## @param ignoredir               flag to ignore ignore the sub dir name files are
##                            placed in
## @param DEBUG_dofile            flag to print out debug info and return
## @param subdsnames              array of subdsnames
##
## note this function echoes to fd 3 when finished and is called by mainloop
## multi proccesseing
##
###############################################################################

dofile () {
    myline=$1

    local sourcedir=${indir//\/\///}
    local sourcedir=${sourcedir//\/\///}
    local tmpdir
    local dir=""
    
    tmpdir=$(mktemp -d -p "$tmp" "${dsname}XXXXXXXXXX") || {
        printerror "mktemp"
        echo >&3
        return
    }
    
    ##### new earth explorer #####
    #FIXME add error checking
    if [ -n "$NewEarthExplorer_user" ] && ! istrue "$OPENGDP_REBUILD"
    then
        local file
        file=$( NewEarthExplorer_get "$myline" "$tmpdir" )
        files=$( "$file" )
        
    ##### lftp #####
        
    else
        if ! grep -q -e "^get" <<< "$myline"
        then
            echo >&3
            rm -rf "${tmpdir}"
            return
        fi
    
        ##### make an array of files #####
            
        local i=0
        local files
        local line
        while read line
        do
            files[i++]=$(sed 's:.*/::' <<<"$line" | sed 's/.* -o //' | sed 's/%20/ /g')
        done < <( tr ";" "\n" <<<"$myline" )
        
        ##### get the last file name #####
        
        local file="${files[@]:(-1)}"
        
        if ! istrue "$ignoredir" && grep -q -e "$sourcedir/" <<<"$myline"
        then
            dir="$(sed "s|.*$sourcedir/\(.*\) [A-Za-z]*:/.*|\1|" <<<"$myline")/"
        fi
        
        
    fi
    
    local ext=$(file_get_extension "$file")
    local base=$(file_get_basename "$file")
    
    local ts=$(dodate <<< "$myline")
    
    if istrue "$DEBUG_dofile"
    then
        printf " myline=%s\n sourcedir=%s\n file=%s\n base=%s\n ext=%s\n dir=%s\n ts=%s\n" \
               "$myline" \
               "$sourcedir "\
               "$file" \
               "$base" \
               "$ext" \
               "$dir" \
               "$ts"
        echo >&3
        rm -rf "${tmpdir}"
        return
    
    fi

    if istrue "$OPENGDP_REBUILD"
    then
        local origdir="${indir/%\//}.old/${dir}"
        
        ##### link to the main files #####
        
        local f
        for f in "${files[@]}"
        do
            ln -s "${origdir}/${f}" "${tmpdir}/${f}"
        done
                
    else
        local origdir="$tmpdir"
        
        if ! [ -n "$NewEarthExplorer_user" ]
        then
                lftp -e "$(subtmplftp "${tmpdir}" <<<"$myline") ; exit" > /dev/null 2> /dev/null
        fi
    fi
    
    ##### loop over the subdataset array #####
        
    if [[ ${#subdsnames[@]} == 0 ]]
    then
        local subdsnames=( "" )
    fi
    
    local sub
    for sub in "${subdsnames[@]}"
    do
        (
            outdir="${outdir}${sub}"
            dsname="${dsname}${sub}"
            if ! [ -d "$outdir/${ts}" ]
            then
                 mkdir -p "$outdir/${ts}"
            fi
        )
    done

    dofile_sub "$file" "$ext" "$tmpdir" "$ts" "$origdir" ${files[@]}

    status=$?

    if (($? == 0)) && ! istrue "$OPENGDP_REBUILD"
    then
        
        ##### mv the files to the source dir #####
        
        local f
        for f in "${files[@]}"
        do
            if [ -f "${tmpdir}/${f}" ]
            then
                mv "${tmpdir}/${f}" "${indir}/${dir}${f}"
            fi
        done
        
    fi
    
    rm -rf "${tmpdir}"
    echo >&3
    
    return $status
    
}

